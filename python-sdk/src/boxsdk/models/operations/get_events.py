import dataclasses
from datetime import date, datetime
from marshmallow import fields
import dateutil.parser
from typing import Optional
from enum import Enum
from boxsdk import utils
from ..shared import clienterror as shared_clienterror
from ..shared import events as shared_events

class GetEventsEventTypeEnum(str, Enum):
    ACCESS_GRANTED = "ACCESS_GRANTED"
    ACCESS_REVOKED = "ACCESS_REVOKED"
    ADD_DEVICE_ASSOCIATION = "ADD_DEVICE_ASSOCIATION"
    ADD_LOGIN_ACTIVITY_DEVICE = "ADD_LOGIN_ACTIVITY_DEVICE"
    ADMIN_LOGIN = "ADMIN_LOGIN"
    APPLICATION_CREATED = "APPLICATION_CREATED"
    APPLICATION_PUBLIC_KEY_ADDED = "APPLICATION_PUBLIC_KEY_ADDED"
    APPLICATION_PUBLIC_KEY_DELETED = "APPLICATION_PUBLIC_KEY_DELETED"
    CHANGE_ADMIN_ROLE = "CHANGE_ADMIN_ROLE"
    CHANGE_FOLDER_PERMISSION = "CHANGE_FOLDER_PERMISSION"
    COLLABORATION_ACCEPT = "COLLABORATION_ACCEPT"
    COLLABORATION_EXPIRATION = "COLLABORATION_EXPIRATION"
    COLLABORATION_INVITE = "COLLABORATION_INVITE"
    COLLABORATION_REMOVE = "COLLABORATION_REMOVE"
    COLLABORATION_ROLE_CHANGE = "COLLABORATION_ROLE_CHANGE"
    COMMENT_CREATE = "COMMENT_CREATE"
    COMMENT_DELETE = "COMMENT_DELETE"
    CONTENT_WORKFLOW_ABNORMAL_DOWNLOAD_ACTIVITY = "CONTENT_WORKFLOW_ABNORMAL_DOWNLOAD_ACTIVITY"
    CONTENT_WORKFLOW_AUTOMATION_ADD = "CONTENT_WORKFLOW_AUTOMATION_ADD"
    CONTENT_WORKFLOW_AUTOMATION_DELETE = "CONTENT_WORKFLOW_AUTOMATION_DELETE"
    CONTENT_WORKFLOW_POLICY_ADD = "CONTENT_WORKFLOW_POLICY_ADD"
    CONTENT_WORKFLOW_SHARING_POLICY_VIOLATION = "CONTENT_WORKFLOW_SHARING_POLICY_VIOLATION"
    CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION = "CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION"
    COPY = "COPY"
    DATA_RETENTION_CREATE_RETENTION = "DATA_RETENTION_CREATE_RETENTION"
    DATA_RETENTION_REMOVE_RETENTION = "DATA_RETENTION_REMOVE_RETENTION"
    DELETE = "DELETE"
    DELETE_USER = "DELETE_USER"
    DEVICE_TRUST_CHECK_FAILED = "DEVICE_TRUST_CHECK_FAILED"
    DOWNLOAD = "DOWNLOAD"
    EDIT = "EDIT"
    EDIT_USER = "EDIT_USER"
    EMAIL_ALIAS_CONFIRM = "EMAIL_ALIAS_CONFIRM"
    EMAIL_ALIAS_REMOVE = "EMAIL_ALIAS_REMOVE"
    ENTERPRISE_APP_AUTHORIZATION_UPDATE = "ENTERPRISE_APP_AUTHORIZATION_UPDATE"
    EXTERNAL_COLLAB_SECURITY_SETTINGS = "EXTERNAL_COLLAB_SECURITY_SETTINGS"
    FAILED_LOGIN = "FAILED_LOGIN"
    FILE_MARKED_MALICIOUS = "FILE_MARKED_MALICIOUS"
    FILE_WATERMARKED_DOWNLOAD = "FILE_WATERMARKED_DOWNLOAD"
    GROUP_ADD_ITEM = "GROUP_ADD_ITEM"
    GROUP_ADD_USER = "GROUP_ADD_USER"
    GROUP_CREATION = "GROUP_CREATION"
    GROUP_DELETION = "GROUP_DELETION"
    GROUP_EDITED = "GROUP_EDITED"
    GROUP_REMOVE_ITEM = "GROUP_REMOVE_ITEM"
    GROUP_REMOVE_USER = "GROUP_REMOVE_USER"
    ITEM_MODIFY = "ITEM_MODIFY"
    ITEM_OPEN = "ITEM_OPEN"
    ITEM_SHARED_UPDATE = "ITEM_SHARED_UPDATE"
    ITEM_SYNC = "ITEM_SYNC"
    ITEM_UNSYNC = "ITEM_UNSYNC"
    LEGAL_HOLD_ASSIGNMENT_CREATE = "LEGAL_HOLD_ASSIGNMENT_CREATE"
    LEGAL_HOLD_ASSIGNMENT_DELETE = "LEGAL_HOLD_ASSIGNMENT_DELETE"
    LEGAL_HOLD_POLICY_CREATE = "LEGAL_HOLD_POLICY_CREATE"
    LEGAL_HOLD_POLICY_DELETE = "LEGAL_HOLD_POLICY_DELETE"
    LEGAL_HOLD_POLICY_UPDATE = "LEGAL_HOLD_POLICY_UPDATE"
    LOCK = "LOCK"
    LOGIN = "LOGIN"
    METADATA_INSTANCE_CREATE = "METADATA_INSTANCE_CREATE"
    METADATA_INSTANCE_DELETE = "METADATA_INSTANCE_DELETE"
    METADATA_INSTANCE_UPDATE = "METADATA_INSTANCE_UPDATE"
    METADATA_TEMPLATE_CREATE = "METADATA_TEMPLATE_CREATE"
    METADATA_TEMPLATE_DELETE = "METADATA_TEMPLATE_DELETE"
    METADATA_TEMPLATE_UPDATE = "METADATA_TEMPLATE_UPDATE"
    MOVE = "MOVE"
    NEW_USER = "NEW_USER"
    OAUTH2_ACCESS_TOKEN_REVOKE = "OAUTH2_ACCESS_TOKEN_REVOKE"
    PREVIEW = "PREVIEW"
    REMOVE_DEVICE_ASSOCIATION = "REMOVE_DEVICE_ASSOCIATION"
    REMOVE_LOGIN_ACTIVITY_DEVICE = "REMOVE_LOGIN_ACTIVITY_DEVICE"
    RENAME = "RENAME"
    RETENTION_POLICY_ASSIGNMENT_ADD = "RETENTION_POLICY_ASSIGNMENT_ADD"
    SHARE = "SHARE"
    SHARE_EXPIRATION = "SHARE_EXPIRATION"
    SHIELD_ALERT = "SHIELD_ALERT"
    SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED = "SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED"
    SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED_MISSING_JUSTIFICATION = "SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED_MISSING_JUSTIFICATION"
    SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED = "SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED"
    SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED_MISSING_JUSTIFICATION = "SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED_MISSING_JUSTIFICATION"
    SHIELD_JUSTIFICATION_APPROVAL = "SHIELD_JUSTIFICATION_APPROVAL"
    SIGN_DOCUMENT_ASSIGNED = "SIGN_DOCUMENT_ASSIGNED"
    SIGN_DOCUMENT_CANCELLED = "SIGN_DOCUMENT_CANCELLED"
    SIGN_DOCUMENT_COMPLETED = "SIGN_DOCUMENT_COMPLETED"
    SIGN_DOCUMENT_CONVERTED = "SIGN_DOCUMENT_CONVERTED"
    SIGN_DOCUMENT_CREATED = "SIGN_DOCUMENT_CREATED"
    SIGN_DOCUMENT_DECLINED = "SIGN_DOCUMENT_DECLINED"
    SIGN_DOCUMENT_EXPIRED = "SIGN_DOCUMENT_EXPIRED"
    SIGN_DOCUMENT_SIGNED = "SIGN_DOCUMENT_SIGNED"
    SIGN_DOCUMENT_VIEWED_BY_SIGNED = "SIGN_DOCUMENT_VIEWED_BY_SIGNED"
    SIGNER_DOWNLOADED = "SIGNER_DOWNLOADED"
    SIGNER_FORWARDED = "SIGNER_FORWARDED"
    STORAGE_EXPIRATION = "STORAGE_EXPIRATION"
    TASK_ASSIGNMENT_CREATE = "TASK_ASSIGNMENT_CREATE"
    TASK_ASSIGNMENT_DELETE = "TASK_ASSIGNMENT_DELETE"
    TASK_ASSIGNMENT_UPDATE = "TASK_ASSIGNMENT_UPDATE"
    TASK_CREATE = "TASK_CREATE"
    TASK_UPDATE = "TASK_UPDATE"
    TERMS_OF_SERVICE_ACCEPT = "TERMS_OF_SERVICE_ACCEPT"
    TERMS_OF_SERVICE_REJECT = "TERMS_OF_SERVICE_REJECT"
    UNDELETE = "UNDELETE"
    UNLOCK = "UNLOCK"
    UNSHARE = "UNSHARE"
    UPDATE_COLLABORATION_EXPIRATION = "UPDATE_COLLABORATION_EXPIRATION"
    UPDATE_SHARE_EXPIRATION = "UPDATE_SHARE_EXPIRATION"
    UPLOAD = "UPLOAD"
    USER_AUTHENTICATE_OAUTH2_ACCESS_TOKEN_CREATE = "USER_AUTHENTICATE_OAUTH2_ACCESS_TOKEN_CREATE"
    WATERMARK_LABEL_CREATE = "WATERMARK_LABEL_CREATE"
    WATERMARK_LABEL_DELETE = "WATERMARK_LABEL_DELETE"

class GetEventsStreamTypeEnum(str, Enum):
    ALL = "all"
    CHANGES = "changes"
    SYNC = "sync"
    ADMIN_LOGS = "admin_logs"
    ADMIN_LOGS_STREAMING = "admin_logs_streaming"


@dataclasses.dataclass
class GetEventsQueryParams:
    created_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created_after', 'style': 'form', 'explode': True }})
    created_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created_before', 'style': 'form', 'explode': True }})
    event_type: Optional[list[GetEventsEventTypeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'event_type', 'style': 'form', 'explode': False }})
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    stream_position: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stream_position', 'style': 'form', 'explode': True }})
    stream_type: Optional[GetEventsStreamTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stream_type', 'style': 'form', 'explode': True }})
    

@dataclasses.dataclass
class GetEventsRequest:
    query_params: GetEventsQueryParams = dataclasses.field()
    retries: Optional[utils.RetryConfig] = dataclasses.field(default=None)
    

@dataclasses.dataclass
class GetEventsResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    client_error: Optional[shared_clienterror.ClientError] = dataclasses.field(default=None)
    events: Optional[shared_events.Events] = dataclasses.field(default=None)
    
